/**
 * @Author         : David Nguy·ªÖn <davidnguyen67dev@gmail.com>
 * @CreatedDate    : 2024-06-22 14:56:00
 * @LastEditors    : David Nguy·ªÖn <davidnguyen67dev@gmail.com>
 * @LastEditDate   : 2024-06-29 14:24:03
 * @FilePath       : UsersEntity.java
 * @CopyRight      : Con ch√π ch√π ü•¥ü•¥
 **/

package com.david.server.database.models.mysql;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.JoinColumn;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

import java.util.*;

@Entity
@Table(name = "users")
@Data
@EqualsAndHashCode(callSuper = true)
public class UsersEntity extends BaseEntity {
  @Column(unique = true)
  private String email;

  @Column(nullable = false, unique = false)
  private String firstName;

  @Column(nullable = false, unique = false)
  private String lastName;

  @Column(columnDefinition = "boolean default true")
  private Boolean active;

  /**
   * Thi·∫øt l·∫≠p m·ªëi quan h·ªá nhi·ªÅu-nhi·ªÅu gi·ªØa UsersEntity v√† RolesEntity.
   * 
   * @CascadeType.ALL ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ √°p d·ª•ng c√°c thao t√°c (persist, merge,
   *                  remove,
   *                  refresh, detach)
   * @FetchType.LAZY ƒë∆∞·ª£c s·ª≠ d·ª•ng khi d·ªØ li·ªáu li√™n quan s·∫Ω ch·ªâ ƒë∆∞·ª£c t·∫£i khi c·∫ßn
   *                 thi·∫øt, t·ª©c l√† khi n√≥ th·ª±c s·ª± ƒë∆∞·ª£c truy c·∫≠p
   *                 t·ª´ th·ª±c th·ªÉ ch√≠nh ƒë·∫øn th·ª±c th·ªÉ li√™n quan.
   * 
   * @JoinTable ƒë·ªãnh nghƒ©a b·∫£ng li√™n k·∫øt trung gian "user_roles" gi·ªØa b·∫£ng "users"
   *            v√† "roles".
   * @JoinColumn(name = "user_id") ch·ªâ ƒë·ªãnh c·ªôt kh√≥a ch√≠nh trong b·∫£ng n√†y
   *                  tham chi·∫øu ƒë·∫øn "user_id".
   * @inverseJoinColumns = @JoinColumn(name = "role_id") ch·ªâ ƒë·ªãnh c·ªôt kh√≥a ch√≠nh
   *                     trong b·∫£ng RolesEntity tham chi·∫øu ƒë·∫øn "role_id".
   * 
   * @EqualsAndHashCode.Exclude ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ lo·∫°i tr·ª´ m·ªôt
   *                            tr∆∞·ªùng kh·ªèi vi·ªác t√≠nh
   *                            to√°n ph∆∞∆°ng th·ª©c equals v√† hashCode.
   * 
   * @ToString.Exclude ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ lo·∫°i tr·ª´ m·ªôt tr∆∞·ªùng kh·ªèi ph∆∞∆°ng th·ª©c
   *                   toString.
   */
  @ManyToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY)
  @JoinTable(name = "user_roles", joinColumns = { @JoinColumn(name = "user_id") }, inverseJoinColumns = {
      @JoinColumn(name = "role_id") })
  @EqualsAndHashCode.Exclude
  @ToString.Exclude
  Set<RolesEntity> roles = new HashSet<>();

  /**
   * M·ªëi quan h·ªá m·ªôt-nhi·ªÅu v·ªõi th·ª±c th·ªÉ SalesOrdersEntity.
   *
   * @OneToMany: ƒê√°nh d·∫•u ƒë√¢y l√† m·ªëi quan h·ªá m·ªôt-nhi·ªÅu.
   * @mappedBy = "user": Ch·ªâ ra r·∫±ng m·ªëi quan h·ªá n√†y ƒë∆∞·ª£c √°nh x·∫° b·ªüi thu·ªôc t√≠nh
   *           "user" trong l·ªõp SalesOrdersEntity.
   * @CascadeType.ALL: √Åp d·ª•ng t·∫•t c·∫£ c√°c ki·ªÉu cascade (PERSIST,
   *                   MERGE, REMOVE, REFRESH, DETACH).
   * @FetchType.LAZY: S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c t·∫£i d·ªØ li·ªáu l∆∞·ªùi (lazy
   *                  loading).
   * @EqualsAndHashCode.Exclude: Lo·∫°i tr·ª´ tr∆∞·ªùng n√†y kh·ªèi c√°c ph∆∞∆°ng th·ª©c
   *                             equals v√† hashCode ƒë∆∞·ª£c t·∫°o b·ªüi Lombok.
   * @ToString.Exclude: Lo·∫°i tr·ª´ tr∆∞·ªùng n√†y kh·ªèi ph∆∞∆°ng th·ª©c toString ƒë∆∞·ª£c t·∫°o
   *                    b·ªüi Lombok.
   */
  @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
  @EqualsAndHashCode.Exclude
  @ToString.Exclude
  private Set<SalesOrdersEntity> salesOrders;
}
