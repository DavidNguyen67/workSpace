/**
 * @Author         : David Nguy·ªÖn <davidnguyen67dev@gmail.com>
 * @CreatedDate    : 2024-06-22 23:05:00
 * @LastEditors    : David Nguy·ªÖn <davidnguyen67dev@gmail.com>
 * @LastEditDate   : 2024-06-22 23:55:18
 * @CopyRight      : Con ch√π ch√π ü•¥ü•¥
**/

package com.david.server.database.models.mysql;

import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

@Entity
@Table(name = "products")
@Data
@EqualsAndHashCode(callSuper = true)
public class ProductsEntity extends BaseEntity {
  @Column(nullable = false)
  private String sku;

  @Column(nullable = false)
  private String name;

  @Column
  private String description;

  @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY) // ƒê√°nh d·∫•u c√≥ m·ªói quan h·ªá 1-1 v·ªõi ProductStatuses
  @JoinColumn(name = "product_status_id", nullable = false) // Li√™n k·∫øt v·ªõi nhau qua kh√≥a ngo·∫°i product_status_id
  private ProductStatusesEntity productStatus;

  @Column(name = "regular_price")
  private double regularPrice = 0.0;

  @Column(name = "discount_price")
  private double discountPrice = 0.0;

  @Column
  private int quantity = 0;

  @Column
  private boolean taxable = false;

  /**
   * Thi·∫øt l·∫≠p m·ªëi quan h·ªá nhi·ªÅu-nhi·ªÅu gi·ªØa ProductsEntity v√† TagsEntity.
   * CascadeType.ALL ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ √°p d·ª•ng c√°c thao t√°c (persist, merge,
   * remove,
   * refresh, detach)
   * t·ª´ th·ª±c th·ªÉ ch√≠nh ƒë·∫øn th·ª±c th·ªÉ li√™n quan.
   *
   * @JoinTable ƒë·ªãnh nghƒ©a b·∫£ng li√™n k·∫øt trung gian "product_tags" gi·ªØa b·∫£ng
   *            "products"
   *            v√† "products".
   * @JoinColumn(name = "product_id") ch·ªâ ƒë·ªãnh c·ªôt kh√≥a ch√≠nh trong b·∫£ng n√†y
   *                  tham chi·∫øu ƒë·∫øn "product_id" c·ªßa b·∫£ng product_tags
   * @inverseJoinColumns = @JoinColumn(name = "tag_id") ch·ªâ ƒë·ªãnh c·ªôt kh√≥a ch√≠nh
   *                     trong b·∫£ng TagsEntity tham chi·∫øu ƒë·∫øn "tag_id". c·ªßa b·∫£ng
   *                     product_tags
   */
  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
  @JoinTable(name = "product_tags", joinColumns = { @JoinColumn(name = "product_id")
  }, inverseJoinColumns = {
      @JoinColumn(name = "tag_id") })
  @EqualsAndHashCode.Exclude
  @ToString.Exclude
  Set<TagsEntity> tags = new HashSet<>();

  /**
   * Thi·∫øt l·∫≠p m·ªëi quan h·ªá nhi·ªÅu-nhi·ªÅu gi·ªØa ProductsEntity v√† CategoriesEntity.
   * CascadeType.ALL ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ √°p d·ª•ng c√°c thao t√°c (persist, merge,
   * remove,
   * refresh, detach)
   * t·ª´ th·ª±c th·ªÉ ch√≠nh ƒë·∫øn th·ª±c th·ªÉ li√™n quan.
   *
   * @JoinTable ƒë·ªãnh nghƒ©a b·∫£ng li√™n k·∫øt trung gian "product_categories" gi·ªØa b·∫£ng
   *            "products"
   *            v√† "products".
   * @JoinColumn(name = "product_id") ch·ªâ ƒë·ªãnh c·ªôt kh√≥a ch√≠nh trong b·∫£ng n√†y
   *                  tham chi·∫øu ƒë·∫øn "product_id" c·ªßa b·∫£ng product_categories
   * @inverseJoinColumns = @JoinColumn(name = "category_id") ch·ªâ ƒë·ªãnh c·ªôt kh√≥a
   *                     ch√≠nh.
   *                     trong b·∫£ng CategoriesEntity tham chi·∫øu ƒë·∫øn "category_id"
   *                     c·ªßa b·∫£ng
   *                     product_categories
   */
  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
  @JoinTable(name = "product_categories", joinColumns = { @JoinColumn(name = "product_id")
  }, inverseJoinColumns = {
      @JoinColumn(name = "category_id") })
  @EqualsAndHashCode.Exclude
  @ToString.Exclude
  Set<CategoriesEntity> categories = new HashSet<>();
}
