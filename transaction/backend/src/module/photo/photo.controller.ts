/**
 * @Author         : David Nguy·ªÖn <davidnguyen67dev@gmail.com>
 * @CreatedDate    : 2024-06-25 14:51:00
 * @LastEditors    : David Nguy·ªÖn <davidnguyen67dev@gmail.com>
 * @LastEditDate   : 2024-06-25 21:38:28
 * @CopyRight      : Con ch√π ch√π ü•¥ü•¥
 **/

import {
  Body,
  Controller,
  Delete,
  Get,
  ParseUUIDPipe,
  Post,
  Query,
} from '@nestjs/common';
import { PhotoService } from './photo.service';
import { CreatePhotoDto } from './dto/create-photo.dto';
import { OnConnectionClosed } from 'src/decorator/OnConnectionClosed.decorator';
import { Observable } from 'rxjs';
import sleep from 'src/utility/function/sleep.function';

@Controller('photo')
export class PhotoController {
  constructor(private readonly photoService: PhotoService) {}

  /**
   * T·∫°o m·ªôt photo m·ªõi.
   * @param createPhotoDto - D·ªØ li·ªáu c·ªßa photo m·ªõi s·∫Ω ƒë∆∞·ª£c t·∫°o.
   * @returns K·∫øt qu·∫£ c·ªßa vi·ªác t·∫°o photo.
   */
  @Post()
  async createOne(@Body() createPhotoDto: CreatePhotoDto) {
    return await this.photoService.createOne(createPhotoDto);
  }

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ c√°c photo.
   * @returns Danh s√°ch t·∫•t c·∫£ c√°c photo.
   */
  @Get()
  async findAll() {
    return await this.photoService.findAll();
  }

  /**
   * X√≥a m·ªôt photo theo ID. N·∫øu k·∫øt n·ªëi b·ªã hu·ª∑ khi ho√†n t·∫•t x√≥a, s·∫Ω th·ª±c hi·ªán rollback.
   * @param deletePhotoDto - ID c·ªßa photo c·∫ßn x√≥a.
   * @param onClosed - Observable ƒë·ªÉ theo d√µi s·ª± ki·ªán k·∫øt n·ªëi b·ªã ƒë√≥ng.
   * @returns Th√¥ng b√°o "Oke" n·∫øu vi·ªác x√≥a ho√†n t·∫•t m√† kh√¥ng b·ªã gi√°n ƒëo·∫°n.
   */
  @Delete()
  async deleteOne(
    @Query('id', ParseUUIDPipe) deletePhotoDto: string,
    @OnConnectionClosed() onClosed: Observable<void>,
  ) {
    // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán user hu·ª∑ connect
    // Khi user hu·ª∑ connect ( hu·ª∑ y√™u c·∫ßu ) th√¨ s·∫Ω ƒëi v√†o h√†m n√†y
    onClosed.subscribe({
      complete: async () => {
        console.log('Request is canceled by user');
        return await this.photoService.rollback();
      },
    });

    await this.photoService.delete(deletePhotoDto);

    await sleep(5000);

    return 'Oke';
  }
}
