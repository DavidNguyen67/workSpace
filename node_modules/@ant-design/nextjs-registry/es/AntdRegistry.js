'use client';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { useRef, useState } from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import { useServerInsertedHTML } from 'next/navigation';
var AntdRegistry = function AntdRegistry(_ref) {
  var children = _ref.children;
  var _useState = useState(function () {
      return createCache();
    }),
    _useState2 = _slicedToArray(_useState, 1),
    cache = _useState2[0];
  var inserted = useRef(false);
  useServerInsertedHTML(function () {
    var styleText = extractStyle(cache, {
      plain: true
    });
    if (inserted.current) {
      return null;
    }
    inserted.current = true;
    return /*#__PURE__*/React.createElement("style", {
      id: "antd-cssinjs"
      // to make sure this style is inserted before Ant Design's style generated by client
      ,
      "data-rc-order": "prepend",
      "data-rc-priority": "-1000",
      dangerouslySetInnerHTML: {
        __html: styleText
      }
    });
  });
  return /*#__PURE__*/React.createElement(StyleProvider, {
    cache: cache
  }, children);
};
export default AntdRegistry;